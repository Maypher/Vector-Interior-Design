/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    project: Project;
    'payload-folders': FolderInterface;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    'payload-folders': {
      documentsAndFolders: 'payload-folders' | 'media';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    project: ProjectSelect<false> | ProjectSelect<true>;
    'payload-folders': PayloadFoldersSelect<false> | PayloadFoldersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    mainPageImages: MainPageImage;
  };
  globalsSelect: {
    mainPageImages: MainPageImagesSelect<false> | MainPageImagesSelect<true>;
  };
  locale: 'en' | 'es';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  folder?: (number | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    loading?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders".
 */
export interface FolderInterface {
  id: number;
  name: string;
  folder?: (number | null) | FolderInterface;
  documentsAndFolders?: {
    docs?: (
      | {
          relationTo?: 'payload-folders';
          value: number | FolderInterface;
        }
      | {
          relationTo?: 'media';
          value: number | Media;
        }
    )[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Sección principal de la página. Contiene todas las imagenes de una obra.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project".
 */
export interface Project {
  id: number;
  _order?: string | null;
  /**
   * El nombre del proyecto.
   */
  name: string;
  /**
   * El área del projecto en metros cuadrados.
   */
  area: number;
  /**
   * Descripción general del projecto.
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  images?:
    | (
        | {
            /**
             * Las imágenes de este proyecto.
             */
            image: number | Media;
            /**
             * La descripción de la imagen
             */
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            /**
             * El color del fondo de la imagen.
             */
            bgColor: string;
            /**
             * La configuración que determina como la imagen de un proyecto se ve en dispositvos móbiles.
             */
            phoneConf: {
              imgAlign: 'left' | 'right' | 'center' | 'overflow';
              /**
               * La posición de la descripción relativa a la imagen.
               */
              descPos?: ('n' | 's' | 'e' | 'w') | null;
            };
            /**
             * La configuración que determina como se ve la imágen de un proyecto en escritorio.
             */
            deskConf: {
              /**
               * El tamaño de la imagen relativo al bloque que la contiene
               */
              imageSize: number;
              /**
               * La posición de la descripción relativa a la imagen.
               */
              descPos?: ('n' | 's' | 'e' | 'w') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'image';
          }
        | {
            images?:
              | {
                  /**
                   * Las imágenes de este proyecto.
                   */
                  image: number | Media;
                  /**
                   * La descripción de la imagen
                   */
                  description?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  /**
                   * El color del fondo de la imagen.
                   */
                  bgColor: string;
                  /**
                   * La configuración que determina como la imagen de un proyecto se ve en dispositvos móbiles.
                   */
                  phoneConf: {
                    imgAlign: 'left' | 'right' | 'center' | 'overflow';
                    /**
                     * La posición de la descripción relativa a la imagen.
                     */
                    descPos?: ('n' | 's' | 'e' | 'w') | null;
                  };
                  /**
                   * La configuración que determina como se ve la imágen de un proyecto en escritorio.
                   */
                  deskConf: {
                    /**
                     * El tamaño de la imagen relativo al bloque que la contiene
                     */
                    imageSize: number;
                    /**
                     * La posición de la descripción relativa a la imagen.
                     */
                    descPos?: ('n' | 's' | 'e' | 'w') | null;
                    /**
                     * Establece esta imagen como parte de un grupo y donde debería ser alineado en el contenedor del grupo.
                     */
                    groupAlign?: ('top' | 'middle' | 'bottom') | null;
                  };
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageGroup';
          }
      )[]
    | null;
  /**
   * La imágen que aparece en la lista de selección de proyectos.
   */
  thumbnail?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'project';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'payload-folders';
        value: number | FolderInterface;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        loading?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project_select".
 */
export interface ProjectSelect<T extends boolean = true> {
  _order?: T;
  name?: T;
  area?: T;
  description?: T;
  images?:
    | T
    | {
        image?:
          | T
          | {
              image?: T;
              description?: T;
              bgColor?: T;
              phoneConf?:
                | T
                | {
                    imgAlign?: T;
                    descPos?: T;
                  };
              deskConf?:
                | T
                | {
                    imageSize?: T;
                    descPos?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageGroup?:
          | T
          | {
              images?:
                | T
                | {
                    image?: T;
                    description?: T;
                    bgColor?: T;
                    phoneConf?:
                      | T
                      | {
                          imgAlign?: T;
                          descPos?: T;
                        };
                    deskConf?:
                      | T
                      | {
                          imageSize?: T;
                          descPos?: T;
                          groupAlign?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  thumbnail?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders_select".
 */
export interface PayloadFoldersSelect<T extends boolean = true> {
  name?: T;
  folder?: T;
  documentsAndFolders?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Configuración de todas las imágenes que aparecerán en la página principal.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mainPageImages".
 */
export interface MainPageImage {
  id: number;
  /**
   * Imágenes que apareceran en la página principal. Pueden ser imágenes, sobre nosotros o navegación. Sobre nosotros y navegación son obligatorios y debe haber uno solo de cada uno.
   */
  images?:
    | (
        | {
            /**
             * La imágen que mostrar en la página principal.
             */
            image: number | Media;
            /**
             * La descripción de la imágen.
             */
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            /**
             * El color del fondo de la imagen.
             */
            bgColor: string;
            /**
             * Configuración de la imágen en dispositivos móviles.
             */
            phoneConfig: {
              /**
               * Posición de la descripción relativa a la imagen.
               */
              descPos?: ('n' | 's' | 'e' | 'w') | null;
              /**
               * Sangrar la imagen a los bordes de la pantalla.
               */
              overflow?: boolean | null;
            };
            /**
             * La configuración de como se verá una imágen en escritorios.
             */
            deskConfig: {
              /**
               * La posición de la imágen en su contenedor.
               */
              imgPos: 'left' | 'center' | 'right';
              /**
               * El tamaño de la imagen relativo a su contenedor.
               */
              imgSize: number;
              /**
               * La posición de la descripción relativa a la imagen.
               */
              descPos?: ('n' | 's' | 'e' | 'w') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'image';
          }
        | {
            /**
             * El mensaje principal de "Sobre nosotros". La primera línea será más clara que el resto.
             */
            description: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            /**
             * El color del fondo de la imagen.
             */
            bgColor: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'aboutUs';
          }
        | {
            image?: (number | null) | Media;
            imgSize: number;
            /**
             * El color del fondo de la imagen.
             */
            bgColor: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'navigation';
          }
      )[]
    | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mainPageImages_select".
 */
export interface MainPageImagesSelect<T extends boolean = true> {
  images?:
    | T
    | {
        image?:
          | T
          | {
              image?: T;
              description?: T;
              bgColor?: T;
              phoneConfig?:
                | T
                | {
                    descPos?: T;
                    overflow?: T;
                  };
              deskConfig?:
                | T
                | {
                    imgPos?: T;
                    imgSize?: T;
                    descPos?: T;
                  };
              id?: T;
              blockName?: T;
            };
        aboutUs?:
          | T
          | {
              description?: T;
              bgColor?: T;
              id?: T;
              blockName?: T;
            };
        navigation?:
          | T
          | {
              image?: T;
              imgSize?: T;
              bgColor?: T;
              id?: T;
              blockName?: T;
            };
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}