name: TQportfolio

services:
    admin-backend:
        build:
            context: ./backend/
            dockerfile: ./src/admin/Dockerfile
        environment:
            - BUILD_TARGET=${BUILD_TARGET:-dev}
            - PORT=${ADMIN_PORT:-3000}
            - HOST=database
            - USERNAME=${ADMIN_USERNAME:-admin}
            - PASSWORD=${ADMIN_PASSWORD:?Password required for database setup.}
            - DB_PORT=${DATABASE_PORT:-5432}
            - DB_NAME=${DATABASE_NAME:-postgres}
            - FRONTEND_URL=${ADMIN_FRONTEND_URL:?Frontend URL required for CORS.}
        volumes:
            - data:/storage/images/
        networks:
            - admin
            - backend
        depends_on:
            database:
                condition: service_healthy
                restart: true
        develop:
            watch:
                - action: sync
                  path: ./backend/src/admin/
                  target: /app/src/admin/
                - action: sync
                  path: ./backend/src/common/
                  target: /app/src/common/
        restart: on-failure
        profiles:
            - prod
    user-backend:
        build:
            context: ./backend/
            dockerfile: ./src/user/Dockerfile
        volumes:
            - data:/storage/images/
        networks:
            user:
            backend:
        depends_on:
            database:
                condition: service_healthy
                restart: true
        develop:
            watch:
                - action: sync
                  path: ./backend/src/user/
                  target: /app/src/
                - action: sync
                  path: ./backend/src/common/
                  target: /app/src/common/
        environment:
            - PORT=${USER_PORT:-2800}
            - USERNAME=${USER_USERNAME:-frontend}
            - PASSWORD=${USER_PASSWORD:?Password required for user database access.}
            - HOST=database
            - DB_PORT=${DATABASE_PORT:-5432}
            - DB_NAME=${DATABASE_NAME:-postgres}
            - FRONTEND_URL=${USER_FRONTEND_URL:?Frontend URL required for CORS.}
        profiles:
            - prod
    tests:
        build:
            context: ./backend/
            dockerfile: ./tests/Dockerfile
        profiles:
            - tests
        depends_on:
            database:
                condition: service_healthy
                restart: true
        networks:
            - backend
        environment:
            - DB_NAME=${DATABASE_NAME:-postgres}
            - DB_PORT=${DATABASE_PORT:-5432}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Database password required.}
    database:
        build: ./database/
        restart: always
        env_file:
            - .env
        environment:
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${DATABASE_NAME}
            - ADMIN_USERNAME=${ADMIN_USERNAME}
            - ADMIN_PASSWORD=${ADMIN_PASSWORD}
            - USER_USERNAME=${USER_USERNAME}
            - USER_PASSWORD=${USER_PASSWORD}
            - PGPORT=${DATABASE_PORT}
            - PGUSER=postgres
            - LANG=es_ES.UTF-8
            - LANGUAGE=es_ES.UTF-8
            - LC_ALL=es_ES.UTF-8
        volumes:
            - data:/storage/database/
        networks:
            - backend
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
    nginx:
        build: "./nginx/"
        profiles: [ prod ]
        ports:
            - "0.0.0.0:8080:80"
            - "0.0.0.0:8090:20"
        volumes:
            - data:/storage/images/:ro
        depends_on:
            - admin-backend
        networks:
            - backend
        environment:
            - ADMIN_PORT=${ADMIN_PORT:-3000}
            - USER_PORT=${USER_PORT:-2800}
volumes:
    data:
networks:
    user:
    admin:
    backend:
